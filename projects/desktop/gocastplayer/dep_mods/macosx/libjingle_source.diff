Index: talk/app/webrtc/webrtcsession.cc
===================================================================
--- talk/app/webrtc/webrtcsession.cc	(revision 153)
+++ talk/app/webrtc/webrtcsession.cc	(working copy)
@@ -59,10 +59,10 @@
 // Constants for setting the default encoder size.
 // TODO: Implement proper negotiation of video resolution.
 static const int kDefaultVideoCodecId = 100;
-static const int kDefaultVideoCodecFramerate = 30;
+    static const int kDefaultVideoCodecFramerate = 24; // <GOCAST> 30;
 static const char kDefaultVideoCodecName[] = "VP8";
-static const int kDefaultVideoCodecWidth = 640;
-static const int kDefaultVideoCodecHeight = 480;
+    static const int kDefaultVideoCodecWidth = 160; // <GOCAST> 640;
+    static const int kDefaultVideoCodecHeight = 120; // <GOCAST> 480;
 
 static void CopyCandidatesFromSessionDescription(
     const SessionDescriptionInterface* source_desc,
@@ -431,6 +431,11 @@
 void WebRtcSession::SetLocalRenderer(const std::string& name,
                                      cricket::VideoRenderer* renderer) {
   ASSERT(signaling_thread()->IsCurrent());
+    
+    //<GOCAST>
+    channel_manager_->SetLocalRenderer(renderer);
+    //</GOCAST>
+    
   // TODO: Fix SetLocalRenderer.
   // video_channel_->SetLocalRenderer(0, renderer);
 }
Index: talk/app/webrtc/mediastreamhandler.cc
===================================================================
--- talk/app/webrtc/mediastreamhandler.cc	(revision 153)
+++ talk/app/webrtc/mediastreamhandler.cc	(working copy)
@@ -98,6 +98,16 @@
 
 void LocalVideoTrackHandler::OnEnabledChanged() {
   // TODO What should happen when enabled is changed?
+    //<GOCAST>
+    if(false == local_video_track_->enabled())
+    {
+        provider_->SetCaptureDevice(local_video_track_->label(), NULL);
+    }
+    else
+    {
+        provider_->SetCaptureDevice(local_video_track_->label(), local_video_track_->GetVideoCapture());
+    }
+    //</GOCAST>
 }
 
 RemoteVideoTrackHandler::RemoteVideoTrackHandler(
Index: talk/p2p/base/stun.h
===================================================================
--- talk/p2p/base/stun.h	(revision 153)
+++ talk/p2p/base/stun.h	(working copy)
@@ -140,7 +140,7 @@
 class StunMessage {
  public:
   StunMessage();
-  ~StunMessage();
+  virtual ~StunMessage();
 
   int type() const { return type_; }
   size_t length() const { return length_; }
Index: talk/base/refcount.h
===================================================================
--- talk/base/refcount.h	(revision 153)
+++ talk/base/refcount.h	(working copy)
@@ -69,6 +69,8 @@
       : T(p1, p2, p3, p4, p5), ref_count_(0) {
   }
 
+  virtual ~RefCountedObject() {}
+
   virtual int AddRef() {
     return talk_base::AtomicOps::Increment(&ref_count_);
   }
