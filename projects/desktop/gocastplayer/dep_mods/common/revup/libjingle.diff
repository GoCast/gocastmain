Index: libjingle/trunk/talk/media/webrtc/webrtcvoiceengine.cc
===================================================================
--- libjingle/trunk/talk/media/webrtc/webrtcvoiceengine.cc	(revision 279)
+++ libjingle/trunk/talk/media/webrtc/webrtcvoiceengine.cc	(working copy)
@@ -867,6 +867,35 @@
   return true;
 }
 
+bool WebRtcVoiceEngine::GetOutputMute(int *level) {
+  bool enabled;
+  if (voe_wrapper_->volume()->GetSystemOutputMute(enabled) == -1) {
+    LOG_RTCERR1(GetSystemOutputMute, enabled);
+    return false;
+  }
+  *level = enabled ? 0 : 1;
+  return true;
+}
+
+bool WebRtcVoiceEngine::GetInputVolume(int* level) {
+  unsigned int ulevel;
+  if (voe_wrapper_->volume()->GetMicVolume(ulevel) == -1) {
+    LOG_RTCERR1(GetMicVolume, level);
+    return false;
+  }
+  *level = ulevel;
+  return true;
+}
+
+bool WebRtcVoiceEngine::SetInputVolume(int level) {
+  ASSERT(level >= 0 && level <= 255);
+  if (voe_wrapper_->volume()->SetMicVolume(level) == -1) {
+    LOG_RTCERR1(SetMicVolume, level);
+    return false;
+  }
+  return true;
+}
+
 bool WebRtcVoiceEngine::SetOutputVolume(int level) {
   ASSERT(level >= 0 && level <= 255);
   if (voe_wrapper_->volume()->SetSpeakerVolume(level) == -1) {
@@ -2303,13 +2332,12 @@
 }
 
 bool WebRtcVoiceMediaChannel::MuteStream(uint32 ssrc, bool muted) {
-  if (send_ssrc_ != ssrc && ssrc != 0) {
+  /*if (send_ssrc_ != ssrc && ssrc != 0) {
     LOG(LS_WARNING) << "The specified ssrc " << ssrc << " is not in use.";
     return false;
-  }
-  if (engine()->voe()->volume()->SetInputMute(voe_channel(),
-      muted) == -1) {
-    LOG_RTCERR2(SetInputMute, voe_channel(), muted);
+  }*/
+  if (engine()->voe()->volume()->SetSystemInputMute(muted) == -1) {
+    LOG_RTCERR1(SetSystemInputMute, muted);
     return false;
   }
   return true;
Index: libjingle/trunk/talk/media/webrtc/webrtcvoiceengine.h
===================================================================
--- libjingle/trunk/talk/media/webrtc/webrtcvoiceengine.h	(revision 279)
+++ libjingle/trunk/talk/media/webrtc/webrtcvoiceengine.h	(working copy)
@@ -145,7 +145,10 @@
   bool SetDelayOffset(int offset);
   bool SetDevices(const Device* in_device, const Device* out_device);
   bool GetOutputVolume(int* level);
+  bool GetOutputMute(int* level);
   bool SetOutputVolume(int level);
+  bool GetInputVolume(int* level);
+  bool SetInputVolume(int level);
   int GetInputLevel();
   bool SetLocalMonitor(bool enable);
 
Index: libjingle/trunk/talk/media/webrtc/webrtcvideocapturer.cc
===================================================================
--- libjingle/trunk/talk/media/webrtc/webrtcvideocapturer.cc	(revision 279)
+++ libjingle/trunk/talk/media/webrtc/webrtcvideocapturer.cc	(working copy)
@@ -190,8 +190,8 @@
   }
   factory_->DestroyDeviceInfo(info);
   if (supported.empty()) {
-    LOG(LS_ERROR) << "Failed to find usable formats for id: " << device.id;
-    return false;
+    LOG(LS_WARNING) << "Failed to find usable formats for id: " << device.id;
+    //return false;
   }
 
   module_ = factory_->Create(0, vcm_id);
@@ -203,7 +203,9 @@
   // It is safe to change member attributes now.
   module_->AddRef();
   SetId(device.id);
-  SetSupportedFormats(supported);
+  if (!supported.empty()) {
+    SetSupportedFormats(supported);   
+  }
   return true;
 }
 
Index: libjingle/trunk/talk/media/base/mediaengine.h
===================================================================
--- libjingle/trunk/talk/media/base/mediaengine.h	(revision 279)
+++ libjingle/trunk/talk/media/base/mediaengine.h	(working copy)
@@ -129,6 +129,12 @@
   // Device configuration
   // Gets the current speaker volume, as a value between 0 and 255.
   virtual bool GetOutputVolume(int* level) = 0;
+  // Gets the current speaker mute status.
+  virtual bool GetOutputMute(int* level) = 0;
+  // Gets the current mic volume, as a value between 0 and 255.
+  virtual bool GetInputVolume(int* level) = 0;
+  // Sets the current mic volume, as a value between 0 and 255.
+  virtual bool SetInputVolume(int level) = 0;
   // Sets the current speaker volume, as a value between 0 and 255.
   virtual bool SetOutputVolume(int level) = 0;
 
@@ -236,6 +242,15 @@
   virtual bool GetOutputVolume(int* level) {
     return voice_.GetOutputVolume(level);
   }
+  virtual bool GetOutputMute(int* level) {
+    return voice_.GetOutputMute(level);
+  }
+  virtual bool GetInputVolume(int* level) {
+    return voice_.GetInputVolume(level);
+  }
+  virtual bool SetInputVolume(int level) {
+    return voice_.SetInputVolume(level);
+  }
   virtual bool SetOutputVolume(int level) {
     return voice_.SetOutputVolume(level);
   }
Index: libjingle/trunk/talk/app/webrtc/peerconnectioninterface.h
===================================================================
--- libjingle/trunk/talk/app/webrtc/peerconnectioninterface.h	(revision 279)
+++ libjingle/trunk/talk/app/webrtc/peerconnectioninterface.h	(working copy)
@@ -84,6 +84,7 @@
 
 namespace cricket {
 class PortAllocator;
+class ChannelManager;
 }
 
 namespace webrtc {
@@ -356,6 +357,9 @@
   virtual talk_base::scoped_refptr<LocalAudioTrackInterface>
       CreateLocalAudioTrack(const std::string& label,
                             AudioDeviceModule* audio_device) = 0;
+    
+  // Returns the channel manager.
+  virtual cricket::ChannelManager* channel_manager() = 0;
 
  protected:
   // Dtor and ctor protected as objects shouldn't be created or deleted via
Index: libjingle/trunk/talk/app/webrtc/localvideosource.cc
===================================================================
--- libjingle/trunk/talk/app/webrtc/localvideosource.cc	(revision 279)
+++ libjingle/trunk/talk/app/webrtc/localvideosource.cc	(working copy)
@@ -67,16 +67,18 @@
 // Default resolution. If no constraint is specified, this is the resolution we
 // will use.
 static const cricket::VideoFormatPod kDefaultResolution =
-    {640, 480, FPS_TO_INTERVAL(30), cricket::FOURCC_ANY};
+    {160, 120, FPS_TO_INTERVAL(14), cricket::FOURCC_ANY};
+    //{640, 480, FPS_TO_INTERVAL(30), cricket::FOURCC_ANY};
 
 // List of formats used if the camera don't support capability enumeration.
 static const cricket::VideoFormatPod kVideoFormats[] = {
-  {1280, 720, FPS_TO_INTERVAL(30), cricket::FOURCC_ANY},
-  {960, 720, FPS_TO_INTERVAL(30), cricket::FOURCC_ANY},
-  {640, 360, FPS_TO_INTERVAL(30), cricket::FOURCC_ANY},
-  {640, 480, FPS_TO_INTERVAL(30), cricket::FOURCC_ANY},
-  {320, 240, FPS_TO_INTERVAL(30), cricket::FOURCC_ANY},
-  {320, 180, FPS_TO_INTERVAL(30), cricket::FOURCC_ANY}
+  {1280, 720, FPS_TO_INTERVAL(14), cricket::FOURCC_ANY},
+  {960, 720, FPS_TO_INTERVAL(14), cricket::FOURCC_ANY},
+  {640, 360, FPS_TO_INTERVAL(14), cricket::FOURCC_ANY},
+  {640, 480, FPS_TO_INTERVAL(14), cricket::FOURCC_ANY},
+  {320, 240, FPS_TO_INTERVAL(14), cricket::FOURCC_ANY},
+  {320, 180, FPS_TO_INTERVAL(14), cricket::FOURCC_ANY},
+  {160, 120, FPS_TO_INTERVAL(14), cricket::FOURCC_ANY}
 };
 
 MediaSourceInterface::SourceState
Index: libjingle/trunk/talk/app/webrtc/webrtcsession.cc
===================================================================
--- libjingle/trunk/talk/app/webrtc/webrtcsession.cc	(revision 279)
+++ libjingle/trunk/talk/app/webrtc/webrtcsession.cc	(working copy)
@@ -769,11 +769,11 @@
     return;
   }
   uint32 ssrc = 0;
-  if (!VERIFY(GetAudioSsrcByName(BaseSession::local_description(),
+  /*if (!VERIFY(GetAudioSsrcByName(BaseSession::local_description(),
                                  name, &ssrc))) {
     LOG(LS_ERROR) << "SetAudioSend: SSRC does not exist.";
     return;
-  }
+  }*/
   voice_channel_->MuteStream(ssrc, !enable);
   if (enable)
     voice_channel_->SetChannelOptions(options);
Index: libjingle/trunk/talk/session/media/channelmanager.cc
===================================================================
--- libjingle/trunk/talk/session/media/channelmanager.cc	(revision 279)
+++ libjingle/trunk/talk/session/media/channelmanager.cc	(working copy)
@@ -79,6 +79,9 @@
   MSG_ADDVIDEORENDERER = 31,
   MSG_REMOVEVIDEORENDERER = 32,
   MSG_GETSTARTCAPTUREFORMAT = 33,
+  MSG_GETINPUTVOLUME = 34,
+  MSG_SETINPUTVOLUME = 35,
+  MSG_GETOUTPUTMUTE = 36,
 };
 
 static const int kNotSetOutputVolume = -1;
@@ -659,12 +662,44 @@
   return true;
 }
 
+bool ChannelManager::GetOutputMute(bool *enabled) {
+  VolumeLevel volume;
+  if (!Send(MSG_GETOUTPUTMUTE, &volume) || !volume.result) {
+    return false;
+  }
+
+  *enabled = (bool)(volume.level == 0);
+  return true;        
+}
+
+bool ChannelManager::GetInputVolume(int *level) {
+  VolumeLevel volume;
+  if (!Send(MSG_GETINPUTVOLUME, &volume) || !volume.result) {
+    return false;
+  }
+    
+  *level = volume.level;
+  return true;        
+}
+
 bool ChannelManager::GetOutputVolume_w(int* level) {
   ASSERT(worker_thread_ == talk_base::Thread::Current());
   ASSERT(initialized_);
   return media_engine_->GetOutputVolume(level);
 }
 
+bool ChannelManager::GetOutputMute_w(int* level) {
+  ASSERT(worker_thread_ == talk_base::Thread::Current());
+  ASSERT(initialized_);
+  return media_engine_->GetOutputMute(level);
+}
+
+bool ChannelManager::GetInputVolume_w(int* level) {
+  ASSERT(worker_thread_ == talk_base::Thread::Current());
+  ASSERT(initialized_);
+  return media_engine_->GetInputVolume(level);
+}
+
 bool ChannelManager::SetOutputVolume(int level) {
   bool ret = level >= 0 && level <= 255;
   if (initialized_) {
@@ -679,12 +714,32 @@
   return ret;
 }
 
+bool ChannelManager::SetInputVolume(int level) {
+  bool ret = level >= 0 && level <= 255;
+  if (initialized_) {
+    VolumeLevel volume(level);
+    ret &= Send(MSG_SETINPUTVOLUME, &volume) && volume.result;
+  }
+    
+  if (ret) {
+    audio_input_volume_ = level;
+  }
+    
+  return ret;
+}
+
 bool ChannelManager::SetOutputVolume_w(int level) {
   ASSERT(worker_thread_ == talk_base::Thread::Current());
   ASSERT(initialized_);
   return media_engine_->SetOutputVolume(level);
 }
 
+bool ChannelManager::SetInputVolume_w(int level) {
+  ASSERT(worker_thread_ == talk_base::Thread::Current());
+  ASSERT(initialized_);
+  return media_engine_->SetInputVolume(level);
+}
+
 bool ChannelManager::IsSameCapturer(const std::string& capturer_name,
                                     VideoCapturer* capturer) {
   if (capturer == NULL) {
@@ -1069,11 +1124,26 @@
       p->result = GetOutputVolume_w(&p->level);
       break;
     }
+    case MSG_GETOUTPUTMUTE: {
+      VolumeLevel* p = static_cast<VolumeLevel*>(data);
+      p->result = GetOutputMute_w(&p->level);
+      break;
+    }
+    case MSG_GETINPUTVOLUME: {
+      VolumeLevel* p = static_cast<VolumeLevel*>(data);
+      p->result = GetInputVolume_w(&p->level);
+      break;
+    }
     case MSG_SETOUTPUTVOLUME: {
       VolumeLevel* p = static_cast<VolumeLevel*>(data);
       p->result = SetOutputVolume_w(p->level);
       break;
     }
+    case MSG_SETINPUTVOLUME: {
+      VolumeLevel* p = static_cast<VolumeLevel*>(data);
+      p->result = SetInputVolume_w(p->level);
+      break;
+    }
     case MSG_SETLOCALMONITOR: {
       LocalMonitor* p = static_cast<LocalMonitor*>(data);
       p->result = SetLocalMonitor_w(p->enable);
Index: libjingle/trunk/talk/session/media/channelmanager.h
===================================================================
--- libjingle/trunk/talk/session/media/channelmanager.h	(revision 279)
+++ libjingle/trunk/talk/session/media/channelmanager.h	(working copy)
@@ -136,6 +136,9 @@
                        const std::string& wave_out_device, int opts);
   bool GetOutputVolume(int* level);
   bool SetOutputVolume(int level);
+  bool GetOutputMute(bool* enabled);
+  bool GetInputVolume(int* level);
+  bool SetInputVolume(int level);
   bool IsSameCapturer(const std::string& capturer_name,
                       VideoCapturer* capturer);
   bool GetVideoOptions(std::string* cam_device);
@@ -241,6 +244,9 @@
                          const Device* out_dev);
   bool GetOutputVolume_w(int* level);
   bool SetOutputVolume_w(int level);
+  bool GetOutputMute_w(int* level);
+  bool GetInputVolume_w(int* level);
+  bool SetInputVolume_w(int level);
   bool SetLocalMonitor_w(bool enable);
   bool SetVideoOptions_w(const Device* cam_device);
   bool SetDefaultVideoEncoderConfig_w(const VideoEncoderConfig& config);
@@ -293,6 +299,7 @@
   int audio_options_;
   int audio_delay_offset_;
   int audio_output_volume_;
+  int audio_input_volume_;
   std::string camera_device_;
   VideoEncoderConfig default_video_encoder_config_;
   VideoRenderer* local_renderer_;
