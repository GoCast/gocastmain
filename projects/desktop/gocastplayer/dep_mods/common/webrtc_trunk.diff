Index: src/build/merge_libs.gyp
===================================================================
--- src/build/merge_libs.gyp	(revision 2407)
+++ src/build/merge_libs.gyp	(working copy)
@@ -13,7 +13,8 @@
       'target_name': 'no_op',
       'type': 'executable',
       'dependencies': [
-        '../video_engine/video_engine.gyp:video_engine_core',
+#        '../video_engine/video_engine.gyp:video_engine_core',
+        '../../third_party/libjingle/libjingle.gyp:libjingle_peerconnection',
       ],
       'sources': [ 'no_op.cc', ],
     },
Index: src/common_video/libyuv/include/libyuv.h
===================================================================
--- src/common_video/libyuv/include/libyuv.h	(revision 2407)
+++ src/common_video/libyuv/include/libyuv.h	(working copy)
@@ -183,6 +183,24 @@
                                  int src_width,
                                  int src_height,
                                  VideoType src_video_type);
+    
+    // <GOCAST>
+    int ARGBGray(uint8_t* dst_argb,
+                 int dst_stride_argb,
+                 int dst_x, int dst_y,
+                 int width, int height);
+    
+    int ARGBSepia(uint8_t* dst_argb,
+                  int dst_stride_argb,
+                  int dst_x, int dst_y,
+                  int width, int height);
+                  
+    int ARGBScale(const uint8_t* src_argb, int src_stride_argb,
+                  int src_width, int src_height,
+                  uint8_t* dst_argb, int dst_stride_argb,
+                  int dst_width, int dst_height,
+                  int filtering);
+    // </GOCAST>
 
 // Compute PSNR for an I420 frame (all planes).
 double I420PSNR(const uint8_t* ref_frame,
Index: src/common_video/libyuv/libyuv.cc
===================================================================
--- src/common_video/libyuv/libyuv.cc	(revision 2407)
+++ src/common_video/libyuv/libyuv.cc	(working copy)
@@ -412,6 +412,36 @@
                           src_width, -src_height);
 }
 
+    // <GOCAST>
+    int ARGBGray(uint8_t* dst_argb,
+                 int dst_stride_argb,
+                 int dst_x, int dst_y,
+                 int width, int height)
+    {
+        return libyuv::ARGBGray(dst_argb, dst_stride_argb, dst_x, dst_y, width, height);
+    }
+    
+    int ARGBSepia(uint8_t* dst_argb,
+                  int dst_stride_argb,
+                  int dst_x, int dst_y,
+                  int width, int height)
+    {
+        return libyuv::ARGBSepia(dst_argb, dst_stride_argb, dst_x, dst_y, width, height);
+    }
+    
+    int ARGBScale(const uint8_t* src_argb, int src_stride_argb,
+                  int src_width, int src_height,
+                  uint8_t* dst_argb, int dst_stride_argb,
+                  int dst_width, int dst_height,
+                  int filtering)
+    {
+        return libyuv::ARGBScale(src_argb, src_stride_argb,
+                                 src_width, src_height,
+                                 dst_argb, dst_stride_argb,
+                                 dst_width, dst_height, (libyuv::FilterMode)filtering);
+    }
+    // </GOCAST>
+    
 // Compute PSNR for an I420 frame (all planes)
 double I420PSNR(const uint8_t* ref_frame,
                 const uint8_t* test_frame,
Index: DEPS
===================================================================
--- DEPS	(revision 2407)
+++ DEPS	(working copy)
@@ -4,6 +4,7 @@
   "googlecode_url": "http://%s.googlecode.com/svn",
   "chromium_trunk" : "http://src.chromium.org/svn/trunk",
   "chromium_revision": "140240",
+  "libjingle_revision": "153",
 
   # External resources like video and audio files used for testing purposes.
   # Downloaded on demand when needed.
@@ -44,7 +45,7 @@
     "http://git.chromium.org/webm/libvpx.git@cab6ac16",
 
   "trunk/third_party/libyuv":
-    (Var("googlecode_url") % "libyuv") + "/trunk@255",
+    (Var("googlecode_url") % "libyuv") + "/trunk@312",
 
   "trunk/third_party/protobuf":
     Var("chromium_trunk") + "/src/third_party/protobuf@" + Var("chromium_revision"),
@@ -70,6 +71,28 @@
   # Needed by build/common.gypi.
   "trunk/tools/win/supalink":
     Var("chromium_trunk") + "/src/tools/win/supalink@" + Var("chromium_revision"),
+
+
+  # --- libjingle dependencies ---
+
+  "trunk/third_party/libjingle/":
+    File(Var("chromium_trunk") + "/src/third_party/libjingle/libjingle.gyp@" + Var("chromium_revision")),
+
+  "trunk/third_party/libjingle/source":
+    From("trunk/chromium_deps", "src/third_party/libjingle/source"),
+
+  "trunk/third_party/libjingle/overrides/talk/base":
+    (Var("googlecode_url") % "libjingle") + "/trunk/talk/base@" + Var("libjingle_revision"),
+
+  "trunk/third_party/libsrtp/":
+    From("trunk/chromium_deps", "src/third_party/libsrtp"),
+
+  "trunk/third_party/jsoncpp/":
+    Var("chromium_trunk") + "/src/third_party/jsoncpp@" + Var("chromium_revision"),
+
+  "trunk/third_party/jsoncpp/source":
+    "http://jsoncpp.svn.sourceforge.net/svnroot/jsoncpp/trunk/jsoncpp@248",
+
 }
 
 deps_os = {
